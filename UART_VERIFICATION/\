
class Driver;

	virtual Apb_Interface  	u_apb_intf		;
	virtual Uart_Interface 	u_uart_intf		;
	virtual Event_Interface u_event_intf	;
	Apb_Driver				u_apb_driver	;
	MODULE_REGMAP			regmap			;
	mailbox #(Stimulus)		mbx				;
	Stimulus				sti				;
	int 					diff_counter	;
	int						drv_counter		;
 	semaphore 				apb_pass	;


	function new (

		virtual Apb_Interface u_apb_intf		,
		virtual Uart_Interface	u_uart_intf		,
		virtual Event_Interface	u_event_intf	,
		MODULE_REGMAP	regmap					,
		ref int diff_counter					,
		mailbox #(Stimulus)		mbx			

		);

		this.u_apb_intf		=		u_apb_intf							;
		this.u_uart_intf	=		u_uart_intf							;
		this.u_event_intf	=		u_event_intf						;
		this.regmap			=		regmap								;
		this.mbx			=		mbx									;
		this.diff_counter	=		diff_counter						;
		u_apb_driver		=		new(u_apb_intf.apb_driver)			;
		apb_pass	 		= 		new(1);


	endfunction


	task start();
		$display("I am here");
		
		u_apb_driver.start();
		
		do
			begin
				@(u_apb_intf.apb_intf_pos);
				$diaplay("DIFF_COUNTER = %d",diff_counter,$time);
				sequencer(diff_counter);
		$display("I am here",$time);
			end
		while(u_event_intf.signal_test_finish !== 1); //TBD: create from test_end event
		#100 $finish;

	endtask



	task automatic reg_read (	bit [PADDR_WIDTH - 1 : 0] addr );
		
		apb_pass.get(1);

		u_apb_driver.apb_read(addr);

		apb_pass.put(1);

	endtask



	task automatic reg_write (
				bit [PADDR_WIDTH - 1 : 0] addr,
				bit [PDATA_WIDTH - 1 : 0] data
		);

		apb_pass.get(1);

		u_apb_driver.apb_write(addr,	data);

		apb_pass.put(1);

	endtask



	task sequencer (ref int diff_counter);
	
	 if(diff_counter !== 0) begin
		for(int i=0; i<diff_counter; i++)
			begin
				$display("\n\n\n\n~~~~~~~~~~~~~~ DIFF COUNTER = %d~~~~~~~~~~~~~~~~\n",diff_counter);
				i = 0;
				@(u_apb_intf.apb_intf_neg);
				mbx.get(sti);
				drv_counter = drv_counter+1;
				$display("Driver counter = %d",drv_counter,$time);
				//read_write( 1, data_packet.addr, data_packet.data, data_packet.we_i, intf.ACK_o, data_packet.stb_i, data_packet.cyc_i);
				if (sti.presetn === 1'b0)
					u_apb_driver.reset();
				else if (sti.pwrite === 1'b1)
					reg_write(sti.paddr,	sti.pdata);
				else if(sti.pwrite === 1'b0)
					reg_read(sti.paddr);

			end
		end

	endtask : sequencer



endclass 
